// lib/services/data_integrity_check.dart

import 'package:cloud_firestore/cloud_firestore.dart';

/// Service ki·ªÉm tra t√≠nh to√†n v·∫πn d·ªØ li·ªáu
/// 
/// S·ª≠ d·ª•ng ƒë·ªÉ ph√°t hi·ªán c√°c l·ªói:
/// - Theater-Screen mapping kh√¥ng kh·ªõp
/// - D·ªØ li·ªáu orphan (kh√¥ng c√≥ reference)
/// - R√†ng bu·ªôc kh√≥a ngo·∫°i b·ªã vi ph·∫°m
class DataIntegrityCheck {
  final FirebaseFirestore _db = FirebaseFirestore.instance;

  /// üîç Ki·ªÉm tra to√†n b·ªô d·ªØ li·ªáu
  Future<IntegrityReport> checkAll() async {
    print('üîç B·∫ÆT ƒê·∫¶U KI·ªÇM TRA T√çNH TO√ÄN V·∫∏N D·ªÆ LI·ªÜU...\n');
    
    final report = IntegrityReport();
    
    // 1. Ki·ªÉm tra theater-screen mapping
    await _checkTheaterScreenMapping(report);
    
    // 2. Ki·ªÉm tra showtimes
    await _checkShowtimes(report);
    
    // 3. Ki·ªÉm tra bookings
    await _checkBookings(report);
    
    // T·ªïng k·∫øt
    report.printSummary();
    
    return report;
  }

  /// Ki·ªÉm tra: M·ªói screen ph·∫£i thu·ªôc ƒë√∫ng 1 theater
  Future<void> _checkTheaterScreenMapping(IntegrityReport report) async {
    print('üìä 1. Ki·ªÉm tra Theater-Screen Mapping...');
    
    try {
      // L·∫•y t·∫•t c·∫£ theaters
      final theatersSnapshot = await _db.collection('theaters').get();
      final theaterIds = theatersSnapshot.docs.map((doc) => doc.id).toSet();
      
      // L·∫•y t·∫•t c·∫£ screens
      final screensSnapshot = await _db.collection('screens').get();
      
      for (var screenDoc in screensSnapshot.docs) {
        final screenData = screenDoc.data();
        final theaterId = screenData['theaterId'] as String?;
        
        if (theaterId == null) {
          report.addError(
            'Screen ${screenDoc.id} kh√¥ng c√≥ theaterId',
            'screens/${screenDoc.id}',
          );
        } else if (!theaterIds.contains(theaterId)) {
          report.addError(
            'Screen ${screenDoc.id} tham chi·∫øu ƒë·∫øn theater kh√¥ng t·ªìn t·∫°i: $theaterId',
            'screens/${screenDoc.id}',
          );
        }
      }
      
      print('   ‚úÖ ƒê√£ ki·ªÉm tra ${screensSnapshot.docs.length} screens');
      
    } catch (e) {
      report.addError('L·ªói khi ki·ªÉm tra theater-screen: $e', 'system');
    }
  }

  /// Ki·ªÉm tra: Showtimes ph·∫£i c√≥ theater-screen kh·ªõp
  Future<void> _checkShowtimes(IntegrityReport report) async {
    print('üìä 2. Ki·ªÉm tra Showtimes...');
    
    try {
      // Build theater-screen map
      final Map<String, List<String>> theaterScreensMap = {};
      final Map<String, String> screenTheaterMap = {}; // screenId ‚Üí theaterId
      
      final screensSnapshot = await _db.collection('screens').get();
      for (var screenDoc in screensSnapshot.docs) {
        final screenData = screenDoc.data();
        final theaterId = screenData['theaterId'] as String?;
        
        if (theaterId != null) {
          screenTheaterMap[screenDoc.id] = theaterId;
          theaterScreensMap[theaterId] ??= [];
          theaterScreensMap[theaterId]!.add(screenDoc.id);
        }
      }
      
      // Ki·ªÉm tra t·∫•t c·∫£ showtimes
      final showtimesSnapshot = await _db.collection('showtimes').get();
      
      int checkedCount = 0;
      for (var showtimeDoc in showtimesSnapshot.docs) {
        final showtimeData = showtimeDoc.data();
        final theaterId = showtimeData['theaterId'] as String?;
        final screenId = showtimeData['screenId'] as String?;
        final movieId = showtimeData['movieId'] as String?;
        
        // Check 1: Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc
        if (theaterId == null) {
          report.addError(
            'Showtime ${showtimeDoc.id} kh√¥ng c√≥ theaterId',
            'showtimes/${showtimeDoc.id}',
          );
          continue;
        }
        
        if (screenId == null) {
          report.addError(
            'Showtime ${showtimeDoc.id} kh√¥ng c√≥ screenId',
            'showtimes/${showtimeDoc.id}',
          );
          continue;
        }
        
        if (movieId == null) {
          report.addError(
            'Showtime ${showtimeDoc.id} kh√¥ng c√≥ movieId',
            'showtimes/${showtimeDoc.id}',
          );
          continue;
        }
        
        // Check 2: Screen c√≥ t·ªìn t·∫°i kh√¥ng?
        if (!screenTheaterMap.containsKey(screenId)) {
          report.addError(
            'Showtime ${showtimeDoc.id} tham chi·∫øu ƒë·∫øn screen kh√¥ng t·ªìn t·∫°i: $screenId',
            'showtimes/${showtimeDoc.id}',
          );
          continue;
        }
        
        // Check 3: Theater-Screen mapping c√≥ kh·ªõp kh√¥ng?
        final actualTheaterId = screenTheaterMap[screenId];
        if (actualTheaterId != theaterId) {
          report.addError(
            'Showtime ${showtimeDoc.id}: Theater-Screen KH√îNG KH·ªöP! '
            'theaterId=$theaterId nh∆∞ng screen $screenId thu·ªôc theater $actualTheaterId',
            'showtimes/${showtimeDoc.id}',
          );
        }
        
        checkedCount++;
      }
      
      print('   ‚úÖ ƒê√£ ki·ªÉm tra $checkedCount showtimes');
      
    } catch (e) {
      report.addError('L·ªói khi ki·ªÉm tra showtimes: $e', 'system');
    }
  }

  /// Ki·ªÉm tra: Bookings ph·∫£i tham chi·∫øu ƒë√∫ng showtime
  Future<void> _checkBookings(IntegrityReport report) async {
    print('üìä 3. Ki·ªÉm tra Bookings...');
    
    try {
      // L·∫•y t·∫•t c·∫£ showtimeIds
      final showtimesSnapshot = await _db.collection('showtimes').get();
      final showtimeIds = showtimesSnapshot.docs.map((doc) => doc.id).toSet();
      
      // Ki·ªÉm tra bookings
      final bookingsSnapshot = await _db.collection('bookings').get();
      
      for (var bookingDoc in bookingsSnapshot.docs) {
        final bookingData = bookingDoc.data();
        final showtimeId = bookingData['showtimeId'] as String?;
        
        if (showtimeId == null) {
          report.addError(
            'Booking ${bookingDoc.id} kh√¥ng c√≥ showtimeId',
            'bookings/${bookingDoc.id}',
          );
        } else if (!showtimeIds.contains(showtimeId)) {
          report.addError(
            'Booking ${bookingDoc.id} tham chi·∫øu ƒë·∫øn showtime kh√¥ng t·ªìn t·∫°i: $showtimeId',
            'bookings/${bookingDoc.id}',
          );
        }
      }
      
      print('   ‚úÖ ƒê√£ ki·ªÉm tra ${bookingsSnapshot.docs.length} bookings');
      
    } catch (e) {
      report.addError('L·ªói khi ki·ªÉm tra bookings: $e', 'system');
    }
  }

  /// üîç Ki·ªÉm tra nhanh m·ªôt showtime c·ª• th·ªÉ
  Future<void> checkShowtime(String showtimeId) async {
    print('üîç Ki·ªÉm tra showtime: $showtimeId\n');
    
    try {
      final showtimeDoc = await _db.collection('showtimes').doc(showtimeId).get();
      
      if (!showtimeDoc.exists) {
        print('‚ùå Showtime kh√¥ng t·ªìn t·∫°i!');
        return;
      }
      
      final showtimeData = showtimeDoc.data()!;
      final theaterId = showtimeData['theaterId'] as String?;
      final screenId = showtimeData['screenId'] as String?;
      final movieId = showtimeData['movieId'] as String?;
      
      print('üìÑ Th√¥ng tin showtime:');
      print('   Theater ID: $theaterId');
      print('   Screen ID: $screenId');
      print('   Movie ID: $movieId');
      
      // Ki·ªÉm tra theater
      if (theaterId != null) {
        final theaterDoc = await _db.collection('theaters').doc(theaterId).get();
        if (theaterDoc.exists) {
          print('   ‚úÖ Theater: ${theaterDoc.data()?['name']}');
        } else {
          print('   ‚ùå Theater kh√¥ng t·ªìn t·∫°i!');
        }
      }
      
      // Ki·ªÉm tra screen
      if (screenId != null) {
        final screenDoc = await _db.collection('screens').doc(screenId).get();
        if (screenDoc.exists) {
          final screenData = screenDoc.data()!;
          final screenTheaterId = screenData['theaterId'];
          print('   Screen: ${screenData['name']}');
          print('   Screen thu·ªôc theater: $screenTheaterId');
          
          if (screenTheaterId == theaterId) {
            print('   ‚úÖ Theater-Screen mapping ƒê√öNG!');
          } else {
            print('   ‚ùå Theater-Screen mapping SAI! Showtime c√≥ theater=$theaterId nh∆∞ng screen thu·ªôc theater=$screenTheaterId');
          }
        } else {
          print('   ‚ùå Screen kh√¥ng t·ªìn t·∫°i!');
        }
      }
      
      // Ki·ªÉm tra movie
      if (movieId != null) {
        final movieDoc = await _db.collection('movies').doc(movieId).get();
        if (movieDoc.exists) {
          print('   ‚úÖ Movie: ${movieDoc.data()?['title']}');
        } else {
          print('   ‚ùå Movie kh√¥ng t·ªìn t·∫°i!');
        }
      }
      
    } catch (e) {
      print('‚ùå L·ªói: $e');
    }
  }

  /// üîç T√¨m t·∫•t c·∫£ showtimes b·ªã l·ªói theater-screen mapping
  Future<List<String>> findBrokenShowtimes() async {
    print('üîç T√¨m t·∫•t c·∫£ showtimes b·ªã l·ªói...\n');
    
    final brokenShowtimeIds = <String>[];
    
    try {
      // Build screen-theater map
      final Map<String, String> screenTheaterMap = {}; // screenId ‚Üí theaterId
      final screensSnapshot = await _db.collection('screens').get();
      
      for (var screenDoc in screensSnapshot.docs) {
        final screenData = screenDoc.data();
        final theaterId = screenData['theaterId'] as String?;
        if (theaterId != null) {
          screenTheaterMap[screenDoc.id] = theaterId;
        }
      }
      
      // Ki·ªÉm tra t·∫•t c·∫£ showtimes
      final showtimesSnapshot = await _db.collection('showtimes').get();
      
      print('ƒêang ki·ªÉm tra ${showtimesSnapshot.docs.length} showtimes...');
      
      for (var showtimeDoc in showtimesSnapshot.docs) {
        final showtimeData = showtimeDoc.data();
        final theaterId = showtimeData['theaterId'] as String?;
        final screenId = showtimeData['screenId'] as String?;
        
        if (theaterId == null || screenId == null) {
          brokenShowtimeIds.add(showtimeDoc.id);
          continue;
        }
        
        final actualTheaterId = screenTheaterMap[screenId];
        if (actualTheaterId != theaterId) {
          brokenShowtimeIds.add(showtimeDoc.id);
          
          // In ra 10 l·ªói ƒë·∫ßu ti√™n ƒë·ªÉ debug
          if (brokenShowtimeIds.length <= 10) {
            print('‚ùå L·ªói #${brokenShowtimeIds.length}: ${showtimeDoc.id}');
            print('   Showtime.theaterId = $theaterId');
            print('   Screen.theaterId = $actualTheaterId');
          }
        }
      }
      
      print('\nüìä K·∫øt qu·∫£:');
      print('   T·ªïng s·ªë showtimes: ${showtimesSnapshot.docs.length}');
      print('   S·ªë showtimes b·ªã l·ªói: ${brokenShowtimeIds.length}');
      print('   T·ª∑ l·ªá l·ªói: ${(brokenShowtimeIds.length * 100 / showtimesSnapshot.docs.length).toStringAsFixed(1)}%');
      
      if (brokenShowtimeIds.isEmpty) {
        print('   ‚úÖ Kh√¥ng c√≥ l·ªói!');
      } else {
        print('   ‚ùå C·∫¶N FIX: Ch·∫°y l·∫°i seed ƒë·ªÉ s·ª≠a!');
      }
      
    } catch (e) {
      print('‚ùå L·ªói: $e');
    }
    
    return brokenShowtimeIds;
  }
}

/// Report k·∫øt qu·∫£ ki·ªÉm tra
class IntegrityReport {
  final List<IntegrityError> errors = [];
  
  void addError(String message, String path) {
    errors.add(IntegrityError(message, path));
  }
  
  bool get hasErrors => errors.isNotEmpty;
  
  void printSummary() {
    print('\n${'='*60}');
    print('üìä K·∫æT QU·∫¢ KI·ªÇM TRA T√çNH TO√ÄN V·∫∏N D·ªÆ LI·ªÜU');
    print('='*60);
    
    if (hasErrors) {
      print('‚ùå T√¨m th·∫•y ${errors.length} l·ªói:\n');
      
      // Group errors by type
      final errorsByPath = <String, List<IntegrityError>>{};
      for (var error in errors) {
        final pathPrefix = error.path.split('/').first;
        errorsByPath[pathPrefix] ??= [];
        errorsByPath[pathPrefix]!.add(error);
      }
      
      errorsByPath.forEach((pathPrefix, pathErrors) {
        print('üìÅ $pathPrefix: ${pathErrors.length} l·ªói');
        for (var error in pathErrors.take(5)) {
          print('   ‚ùå ${error.message}');
        }
        if (pathErrors.length > 5) {
          print('   ... v√† ${pathErrors.length - 5} l·ªói kh√°c');
        }
        print('');
      });
      
      print('‚ùå C·∫¶N H√ÄNH ƒê·ªòNG: Ch·∫°y l·∫°i seed ƒë·ªÉ fix d·ªØ li·ªáu!');
    } else {
      print('‚úÖ‚úÖ‚úÖ HO√ÄN H·∫¢O! Kh√¥ng c√≥ l·ªói n√†o ‚úÖ‚úÖ‚úÖ');
      print('‚úÖ T·∫•t c·∫£ d·ªØ li·ªáu ƒë·ªÅu nh·∫•t qu√°n v√† to√†n v·∫πn');
    }
    
    print('='*60 + '\n');
  }
}

/// M·ªôt l·ªói to√†n v·∫πn d·ªØ li·ªáu
class IntegrityError {
  final String message;
  final String path;
  
  IntegrityError(this.message, this.path);
  
  @override
  String toString() => '$path: $message';
}
