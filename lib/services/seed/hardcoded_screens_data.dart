// lib/services/seed/hardcoded_screens_data.dart

/// ‚úÖ REFACTORED: Real cinema screen layouts
/// 
/// Quy t·∫Øc th·ª±c t·∫ø:
/// - Standard screen: 8 h√†ng √ó 10 gh·∫ø - 2 aisles (c·ªôt 5-6) = 64 gh·∫ø
/// - VIP screen: 6 h√†ng √ó 8 gh·∫ø - 2 aisles (c·ªôt 4-5) = 36 gh·∫ø
/// - IMAX screen: 10 h√†ng √ó 12 gh·∫ø - 2 aisles (c·ªôt 6-7) = 100 gh·∫ø
/// - L·ªëi ƒëi: KH√îNG c√≥ gh·∫ø (ƒë·ªÉ kh√°ch di chuy·ªÉn)
/// - 2 h√†ng cu·ªëi: VIP seats (cho Standard & IMAX)
class HardcodedScreensData {
  
  /// ============================================
  /// STANDARD SCREEN: 8 h√†ng √ó 10 c·ªôt = 64 gh·∫ø
  /// ============================================
  /// Layout:
  ///     1  2  3  4 [  ] [  ]  7  8  9  10
  /// A  [‚ñ°][‚ñ°][‚ñ°][‚ñ°][  ][  ][‚ñ°][‚ñ°][‚ñ°][‚ñ°]
  /// B  [‚ñ°][‚ñ°][‚ñ°][‚ñ°][  ][  ][‚ñ°][‚ñ°][‚ñ°][‚ñ°]
  /// C  [‚ñ°][‚ñ°][‚ñ°][‚ñ°][  ][  ][‚ñ°][‚ñ°][‚ñ°][‚ñ°]
  /// D  [‚ñ°][‚ñ°][‚ñ°][‚ñ°][  ][  ][‚ñ°][‚ñ°][‚ñ°][‚ñ°]
  /// E  [‚ñ°][‚ñ°][‚ñ°][‚ñ°][  ][  ][‚ñ°][‚ñ°][‚ñ°][‚ñ°]
  /// F  [‚ñ°][‚ñ°][‚ñ°][‚ñ°][  ][  ][‚ñ°][‚ñ°][‚ñ°][‚ñ°]
  /// G  [‚óà][‚óà][‚óà][‚óà][  ][  ][‚óà][‚óà][‚óà][‚óà] ‚Üê VIP
  /// H  [‚óà][‚óà][‚óà][‚óà][  ][  ][‚óà][‚óà][‚óà][‚óà] ‚Üê VIP
  static List<Map<String, dynamic>> generateStandardSeats() {
    final seats = <Map<String, dynamic>>[];
    const rows = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];
    const cols = 10;
    
    for (int r = 0; r < rows.length; r++) {
      final row = rows[r];
      for (int col = 1; col <= cols; col++) {
        // ‚ùå Skip aisles (c·ªôt 5-6 l√† l·ªëi ƒëi)
        if (col == 5 || col == 6) continue;
        
        // ‚úÖ 2 h√†ng cu·ªëi (G, H) l√† VIP
        final isVip = (r >= 6); // G=6, H=7
        
        seats.add({
          'id': '$row$col',
          'type': isVip ? 'vip' : 'standard',
          'isAvailable': true,
        });
      }
    }
    return seats;
  }

  /// ============================================
  /// VIP SCREEN: 6 h√†ng √ó 8 c·ªôt = 36 gh·∫ø (ALL VIP)
  /// ============================================
  /// Layout:
  ///     1  2  3 [  ] [  ]  6  7  8
  /// A  [‚óà][‚óà][‚óà][  ][  ][‚óà][‚óà][‚óà]
  /// B  [‚óà][‚óà][‚óà][  ][  ][‚óà][‚óà][‚óà]
  /// C  [‚óà][‚óà][‚óà][  ][  ][‚óà][‚óà][‚óà]
  /// D  [‚óà][‚óà][‚óà][  ][  ][‚óà][‚óà][‚óà]
  /// E  [‚óà][‚óà][‚óà][  ][  ][‚óà][‚óà][‚óà]
  /// F  [‚óà][‚óà][‚óà][  ][  ][‚óà][‚óà][‚óà]
  static List<Map<String, dynamic>> generateVIPSeats() {
    final seats = <Map<String, dynamic>>[];
    const rows = ['A', 'B', 'C', 'D', 'E', 'F'];
    const cols = 8;
    
    for (int r = 0; r < rows.length; r++) {
      final row = rows[r];
      for (int col = 1; col <= cols; col++) {
        // ‚ùå Skip aisles (c·ªôt 4-5 l√† l·ªëi ƒëi cho VIP)
        if (col == 4 || col == 5) continue;
        
        seats.add({
          'id': '$row$col',
          'type': 'vip', // ‚úÖ ALL VIP
          'isAvailable': true,
        });
      }
    }
    return seats;
  }

  /// ============================================
  /// IMAX SCREEN: 10 h√†ng √ó 12 c·ªôt = 100 gh·∫ø
  /// ============================================
  /// Layout:
  ///     1  2  3  4  5 [  ] [  ]  8  9 10 11 12
  /// A  [‚ñ°][‚ñ°][‚ñ°][‚ñ°][‚ñ°][  ][  ][‚ñ°][‚ñ°][‚ñ°][‚ñ°][‚ñ°]
  /// ...
  /// H  [‚óà][‚óà][‚óà][‚óà][‚óà][  ][  ][‚óà][‚óà][‚óà][‚óà][‚óà] ‚Üê VIP
  /// I  [‚óà][‚óà][‚óà][‚óà][‚óà][  ][  ][‚óà][‚óà][‚óà][‚óà][‚óà] ‚Üê VIP
  /// J  [‚óà][‚óà][‚óà][‚óà][‚óà][  ][  ][‚óà][‚óà][‚óà][‚óà][‚óà] ‚Üê VIP
  static List<Map<String, dynamic>> generateIMAXSeats() {
    final seats = <Map<String, dynamic>>[];
    const rows = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'];
    const cols = 12;
    
    for (int r = 0; r < rows.length; r++) {
      final row = rows[r];
      for (int col = 1; col <= cols; col++) {
        // ‚ùå Skip aisles (c·ªôt 6-7 l√† l·ªëi ƒëi)
        if (col == 6 || col == 7) continue;
        
        // ‚úÖ 3 h√†ng cu·ªëi (H, I, J) l√† VIP
        final isVip = (r >= 7); // H=7, I=8, J=9
        
        seats.add({
          'id': '$row$col',
          'type': isVip ? 'vip' : 'standard',
          'isAvailable': true,
        });
      }
    }
    return seats;
  }

  /// ============================================
  /// SCREEN CONFIGURATIONS PER THEATER
  /// ============================================
  
  /// T·∫°o 4-5 ph√≤ng chi·∫øu cho 1 r·∫°p
  /// - R·∫°p l·ªõn (CGV/Lotte): 5 ph√≤ng (3 Standard + 1 VIP + 1 IMAX)
  /// - R·∫°p v·ª´a: 4 ph√≤ng (3 Standard + 1 VIP)
  static List<Map<String, dynamic>> createScreensForTheater(
    String theaterExternalId, {
    bool hasIMAX = false,
  }) {
    final screens = <Map<String, dynamic>>[];
    
    // Standard screens (Ph√≤ng 1-3)
    for (int i = 1; i <= 3; i++) {
      screens.add({
        'externalId': '$theaterExternalId-screen-$i',
        'theaterExternalId': theaterExternalId,
        'name': 'Ph√≤ng $i',
        'type': 'standard',
        'totalSeats': 64, // 8√ó10 - 2 aisles = 64
        'rows': 8,
        'columns': 10,
        'seats': generateStandardSeats(),
      });
    }
    
    // VIP screen (Ph√≤ng 4)
    screens.add({
      'externalId': '$theaterExternalId-screen-4',
      'theaterExternalId': theaterExternalId,
      'name': 'Ph√≤ng 4 - VIP',
      'type': 'vip',
      'totalSeats': 36, // 6√ó8 - 2 aisles = 36
      'rows': 6,
      'columns': 8,
      'seats': generateVIPSeats(),
    });
    
    // IMAX screen (Ph√≤ng 5) - ch·ªâ cho r·∫°p l·ªõn
    if (hasIMAX) {
      screens.add({
        'externalId': '$theaterExternalId-screen-5',
        'theaterExternalId': theaterExternalId,
        'name': 'Ph√≤ng 5 - IMAX',
        'type': 'imax',
        'totalSeats': 100, // 10√ó12 - 2 aisles = 100
        'rows': 10,
        'columns': 12,
        'seats': generateIMAXSeats(),
      });
    }
    
    return screens;
  }

  /// ============================================
  /// SCREENS BY THEATER (44 ph√≤ng t·ªïng)
  /// ============================================
  
  /// Map screens theo theater externalId
  /// 
  /// Key: theater externalId
  /// Value: List c·ªßa 4-5 screens
  static Map<String, List<Map<String, dynamic>>> get screensByTheater {
    return {
      // ================================================
      // H√Ä N·ªòI - 4 r·∫°p √ó 4-5 ph√≤ng = 17 ph√≤ng
      // ================================================
      
      // 1Ô∏è‚É£ CGV Vincom B√† Tri·ªáu (5 ph√≤ng - c√≥ IMAX)
      'cgv-vincom-ba-trieu-hn': createScreensForTheater(
        'cgv-vincom-ba-trieu-hn',
        hasIMAX: true,
      ),
      
      // 2Ô∏è‚É£ BHD Star Vincom Ph·∫°m Ng·ªçc Th·∫°ch (4 ph√≤ng)
      'bhd-vincom-pham-ngoc-thach-hn': createScreensForTheater(
        'bhd-vincom-pham-ngoc-thach-hn',
      ),
      
      // 3Ô∏è‚É£ Lotte Cinema West Lake (4 ph√≤ng)
      'lotte-west-lake-hn': createScreensForTheater(
        'lotte-west-lake-hn',
      ),
      
      // 4Ô∏è‚É£ Galaxy Nguy·ªÖn Du H√† N·ªôi (4 ph√≤ng)
      'galaxy-nguyen-du-hn': createScreensForTheater(
        'galaxy-nguyen-du-hn',
      ),
      
      // ================================================
      // TP. H·ªí CH√ç MINH - 4 r·∫°p √ó 4-5 ph√≤ng = 18 ph√≤ng
      // ================================================
      
      // 5Ô∏è‚É£ CGV Vincom ƒê·ªìng Kh·ªüi (5 ph√≤ng - c√≥ IMAX)
      'cgv-vincom-dong-khoi-hcm': createScreensForTheater(
        'cgv-vincom-dong-khoi-hcm',
        hasIMAX: true,
      ),
      
      // 6Ô∏è‚É£ CGV Landmark 81 (5 ph√≤ng - c√≥ IMAX)
      'cgv-landmark-81-hcm': createScreensForTheater(
        'cgv-landmark-81-hcm',
        hasIMAX: true,
      ),
      
      // 7Ô∏è‚É£ Lotte Cinema Nam S√†i G√≤n (4 ph√≤ng)
      'lotte-nam-saigon-hcm': createScreensForTheater(
        'lotte-nam-saigon-hcm',
      ),
      
      // 8Ô∏è‚É£ Galaxy Nguy·ªÖn Du TP.HCM (4 ph√≤ng)
      'galaxy-nguyen-du-hcm': createScreensForTheater(
        'galaxy-nguyen-du-hcm',
      ),
      
      // ================================================
      // ƒê√Ä N·∫¥NG - 3 r·∫°p √ó 4 ph√≤ng = 12 ph√≤ng
      // ================================================
      
      // 9Ô∏è‚É£ CGV Vincom ƒê√† N·∫µng (4 ph√≤ng)
      'cgv-vincom-da-nang': createScreensForTheater(
        'cgv-vincom-da-nang',
      ),
      
      // üîü Lotte Cinema Vƒ©nh Trung Plaza (4 ph√≤ng)
      'lotte-vinh-trung-plaza-dn': createScreensForTheater(
        'lotte-vinh-trung-plaza-dn',
      ),
      
      // 1Ô∏è‚É£1Ô∏è‚É£ BHD Star Lotte Mart ƒê√† N·∫µng (4 ph√≤ng)
      'bhd-lotte-mart-da-nang': createScreensForTheater(
        'bhd-lotte-mart-da-nang',
      ),
    };
  }

  /// ‚úÖ L·∫•y t·∫•t c·∫£ screens (47 ph√≤ng t·ªïng)
  /// - 4 r·∫°p H√† N·ªôi: 17 ph√≤ng (1 IMAX)
  /// - 4 r·∫°p TP.HCM: 18 ph√≤ng (3 IMAX)
  /// - 3 r·∫°p ƒê√† N·∫µng: 12 ph√≤ng
  static List<Map<String, dynamic>> get allScreens {
    final screens = <Map<String, dynamic>>[];
    for (var theaterScreens in screensByTheater.values) {
      screens.addAll(theaterScreens);
    }
    return screens;
  }
  
  /// ‚úÖ Get screens by theater external ID
  static List<Map<String, dynamic>> getScreensForTheater(String theaterExternalId) {
    return screensByTheater[theaterExternalId] ?? [];
  }
}
