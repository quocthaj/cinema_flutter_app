// lib/services/seed/sync_seed_service.dart

import 'package:cloud_firestore/cloud_firestore.dart';
import 'hardcoded_movies_data.dart';
import 'hardcoded_theaters_data.dart';
import 'hardcoded_screens_data.dart';
import 'hardcoded_showtimes_data.dart';
import 'hardcoded_showtimes_hcm_data.dart';
import 'hardcoded_showtimes_danang_data.dart';
import 'hardcoded_news_data.dart';

/// Service seed data v·ªõi logic SYNC th√¥ng minh
/// 
/// ‚úÖ LOGIC M·ªöI - KH√îNG M·∫§T D·ªÆ LI·ªÜU:
/// 1. N·∫øu b·∫£n ghi ƒë√£ t·ªìn t·∫°i (d·ª±a v√†o externalId) ‚Üí **SO S√ÅNH v√† UPDATE n·∫øu kh√°c**
/// 2. N·∫øu ch∆∞a t·ªìn t·∫°i ‚Üí **INSERT m·ªõi**
/// 3. N·∫øu c√≥ th√™m b·∫£n ghi m·ªõi trong code ‚Üí **TH√äM kh√¥ng tr√πng ID**
/// 4. **KH√îNG X√ìA** d·ªØ li·ªáu bookings, payments, users
/// 
/// ‚úÖ ∆ØU ƒêI·ªÇM:
/// - C√≥ th·ªÉ ch·∫°y nhi·ªÅu l·∫ßn m√† kh√¥ng m·∫•t d·ªØ li·ªáu user (bookings)
/// - Update ƒë∆∞·ª£c metadata phim khi c√≥ thay ƒë·ªïi (poster, rating, etc.)
/// - Th√™m ƒë∆∞·ª£c phim/r·∫°p m·ªõi m√† kh√¥ng ·∫£nh h∆∞·ªüng d·ªØ li·ªáu c≈©
/// 
/// USAGE:
/// ```dart
/// final service = SyncSeedService();
/// 
/// // Sync t·∫•t c·∫£ (an to√†n, kh√¥ng m·∫•t booking)
/// await service.syncAll();
/// 
/// // Ho·∫∑c sync t·ª´ng ph·∫ßn
/// await service.syncMovies();
/// await service.syncTheaters();
/// ```
class SyncSeedService {
  final FirebaseFirestore _db = FirebaseFirestore.instance;
  
  Function(double progress, String message)? onProgress;
  
  /// ‚úÖ Sync t·∫•t c·∫£ d·ªØ li·ªáu (movies, theaters, screens, showtimes)
  Future<SyncReport> syncAll() async {
    print('\n' + '='*60);
    print('üîÑ B·∫ÆT ƒê·∫¶U SYNC D·ªÆ LI·ªÜU (SMART MODE)');
    print('='*60 + '\n');
    
    final report = SyncReport();
    
    try {
      // 1. Sync movies
      onProgress?.call(0.0, 'ƒêang sync movies...');
      print('üé¨ 1. Sync Movies...');
      final movieResult = await syncMovies();
      report.movies = movieResult;
      print('   ‚úÖ ${movieResult.summary}\n');
      onProgress?.call(0.25, 'ƒê√£ sync ${movieResult.total} movies');
      
  // 1.5 Sync news/promotions
  onProgress?.call(0.26, 'ƒêang sync news/promotions...');
  print('üì∞ 1.5. Sync News/Promotions...');
  final newsResult = await syncNews();
  report.news = newsResult;
  print('   ‚úÖ ${newsResult.summary}\n');
  onProgress?.call(0.30, 'ƒê√£ sync ${newsResult.total} news');
      
      // 2. Sync theaters
      onProgress?.call(0.25, 'ƒêang sync theaters...');
      print('üè¢ 2. Sync Theaters...');
      final theaterResult = await syncTheaters();
      report.theaters = theaterResult;
      print('   ‚úÖ ${theaterResult.summary}\n');
      onProgress?.call(0.5, 'ƒê√£ sync ${theaterResult.total} theaters');
      
      // 3. Sync screens
      onProgress?.call(0.5, 'ƒêang sync screens...');
      print('ü™ë 3. Sync Screens...');
      final screenResult = await syncScreens();
      report.screens = screenResult;
      print('   ‚úÖ ${screenResult.summary}\n');
      onProgress?.call(0.75, 'ƒê√£ sync ${screenResult.total} screens');
      
      // 4. Sync showtimes
      onProgress?.call(0.75, 'ƒêang sync showtimes...');
      print('‚è∞ 4. Sync Showtimes...');
      final showtimeResult = await syncShowtimes();
      report.showtimes = showtimeResult;
      print('   ‚úÖ ${showtimeResult.summary}\n');
      onProgress?.call(1.0, 'Ho√†n th√†nh!');
      
      // Print summary
      report.printSummary();
      
      return report;
      
    } catch (e, stackTrace) {
      print('‚ùå L·ªñI SYNC: $e');
      print('Stack trace: $stackTrace');
      onProgress?.call(0.0, 'L·ªói: $e');
      rethrow;
    }
  }
  
  /// ‚úÖ Sync movies - So s√°nh v√† update/insert
  Future<SyncResult> syncMovies() async {
    final result = SyncResult(collectionName: 'movies');
    
    try {
      // L·∫•y t·∫•t c·∫£ movies hi·ªán c√≥
      final snapshot = await _db.collection('movies').get();
      final existingMovies = <String, String>{}; // externalId ‚Üí firestoreId
      
      for (var doc in snapshot.docs) {
        final data = doc.data();
        final externalId = data['externalId'] as String?;
        if (externalId != null) {
          existingMovies[externalId] = doc.id;
        }
      }
      
      // Sync t·ª´ng movie
      for (var movieData in HardcodedMoviesData.allMovies) {
        final externalId = movieData['externalId'] as String;
        
        if (existingMovies.containsKey(externalId)) {
          // Movie ƒë√£ t·ªìn t·∫°i ‚Üí so s√°nh v√† update n·∫øu c·∫ßn
          final firestoreId = existingMovies[externalId]!;
          final needsUpdate = await _needsUpdate(
            'movies',
            firestoreId,
            movieData,
          );
          
          if (needsUpdate) {
            await _db.collection('movies').doc(firestoreId).update({
              ...movieData,
              'updatedAt': FieldValue.serverTimestamp(),
            });
            result.updated++;
            print('   üìù Updated: ${movieData['title']}');
          } else {
            result.unchanged++;
          }
        } else {
          // Movie m·ªõi ‚Üí insert
          await _db.collection('movies').add({
            ...movieData,
            'createdAt': FieldValue.serverTimestamp(),
          });
          result.inserted++;
          print('   ‚ûï Inserted: ${movieData['title']}');
        }
      }
      
    } catch (e) {
      print('‚ùå L·ªói sync movies: $e');
      result.error = e.toString();
    }
    
    return result;
  }

  /// ‚úÖ Sync news & promotions from hardcoded data
  Future<SyncResult> syncNews() async {
    final result = SyncResult(collectionName: 'news');

    try {
      // L·∫•y t·∫•t c·∫£ news hi·ªán c√≥
      final snapshot = await _db.collection('news').get();
      final existing = <String, String>{}; // externalId -> firestoreId

      for (var doc in snapshot.docs) {
        final data = doc.data();
        final externalId = data['externalId'] as String?;
        if (externalId != null) existing[externalId] = doc.id;
      }

      for (var news in HardcodedNewsData.getAllNews()) {
        final externalId = news.id;
        final payload = {
          ...news.toMap(),
          'externalId': externalId,
        };

        if (existing.containsKey(externalId)) {
          final firestoreId = existing[externalId]!;
          final needsUpdate = await _needsUpdate('news', firestoreId, payload);
          if (needsUpdate) {
            await _db.collection('news').doc(firestoreId).update({
              ...payload,
              'updatedAt': FieldValue.serverTimestamp(),
            });
            result.updated++;
            print('   üìù Updated news: ${news.title}');
          } else {
            result.unchanged++;
          }
        } else {
          await _db.collection('news').add({
            ...payload,
            'createdAt': FieldValue.serverTimestamp(),
          });
          result.inserted++;
          print('   ‚ûï Inserted news: ${news.title}');
        }
      }
    } catch (e) {
      print('‚ùå L·ªói sync news: $e');
      result.error = e.toString();
    }

    return result;
  }
  
  /// ‚úÖ Sync theaters
  Future<SyncResult> syncTheaters() async {
    final result = SyncResult(collectionName: 'theaters');
    
    try {
      final snapshot = await _db.collection('theaters').get();
      final existingTheaters = <String, String>{}; // externalId ‚Üí firestoreId
      
      for (var doc in snapshot.docs) {
        final data = doc.data();
        final externalId = data['externalId'] as String?;
        if (externalId != null) {
          existingTheaters[externalId] = doc.id;
        }
      }
      
      for (var theaterData in HardcodedTheatersData.allTheaters) {
        final externalId = theaterData['externalId'] as String;
        
        if (existingTheaters.containsKey(externalId)) {
          final firestoreId = existingTheaters[externalId]!;
          
          // Lu√¥n keep screens hi·ªán t·∫°i (ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng relation)
          final currentDoc = await _db.collection('theaters').doc(firestoreId).get();
          final currentScreens = currentDoc.data()?['screens'] ?? [];
          
          final needsUpdate = await _needsUpdate(
            'theaters',
            firestoreId,
            theaterData,
            excludeFields: ['screens'], // Kh√¥ng so s√°nh screens
          );
          
          if (needsUpdate) {
            await _db.collection('theaters').doc(firestoreId).update({
              'name': theaterData['name'],
              'address': theaterData['address'],
              'city': theaterData['city'],
              'phone': theaterData['phone'],
              'screens': currentScreens, // Gi·ªØ nguy√™n
              'updatedAt': FieldValue.serverTimestamp(),
            });
            result.updated++;
            print('   üìù Updated: ${theaterData['name']}');
          } else {
            result.unchanged++;
          }
        } else {
          await _db.collection('theaters').add({
            'name': theaterData['name'],
            'address': theaterData['address'],
            'city': theaterData['city'],
            'phone': theaterData['phone'],
            'screens': [],
            'externalId': externalId,
            'createdAt': FieldValue.serverTimestamp(),
          });
          result.inserted++;
          print('   ‚ûï Inserted: ${theaterData['name']}');
        }
      }
      
    } catch (e) {
      print('‚ùå L·ªói sync theaters: $e');
      result.error = e.toString();
    }
    
    return result;
  }
  
  /// ‚úÖ Sync screens
  Future<SyncResult> syncScreens() async {
    final result = SyncResult(collectionName: 'screens');
    
    try {
      // Get theater mapping
      final theaterSnapshot = await _db.collection('theaters').get();
      final theaterMap = <String, String>{}; // externalId ‚Üí firestoreId
      
      for (var doc in theaterSnapshot.docs) {
        final externalId = doc.data()['externalId'] as String?;
        if (externalId != null) {
          theaterMap[externalId] = doc.id;
        }
      }
      
      // Get existing screens
      final screenSnapshot = await _db.collection('screens').get();
      final existingScreens = <String, String>{}; // externalId ‚Üí firestoreId
      final theaterScreens = <String, List<String>>{}; // theaterId ‚Üí [screenIds]
      
      for (var doc in screenSnapshot.docs) {
        final data = doc.data();
        final externalId = data['externalId'] as String?;
        if (externalId != null) {
          existingScreens[externalId] = doc.id;
        }
        
        final theaterId = data['theaterId'] as String?;
        if (theaterId != null) {
          theaterScreens.putIfAbsent(theaterId, () => []);
          theaterScreens[theaterId]!.add(doc.id);
        }
      }
      
      // Sync screens
      for (var screenData in HardcodedScreensData.allScreens) {
        final screenExternalId = screenData['externalId'] as String;
        final theaterExternalId = screenData['theaterExternalId'] as String;
        final theaterFirestoreId = theaterMap[theaterExternalId];
        
        if (theaterFirestoreId == null) {
          print('   ‚ö†Ô∏è Theater kh√¥ng t·ªìn t·∫°i: $theaterExternalId');
          continue;
        }
        
        if (existingScreens.containsKey(screenExternalId)) {
          final firestoreId = existingScreens[screenExternalId]!;
          final needsUpdate = await _needsUpdate(
            'screens',
            firestoreId,
            screenData,
            excludeFields: ['theaterExternalId'], // Field n√†y kh√¥ng c√≥ trong Firestore
          );
          
          if (needsUpdate) {
            await _db.collection('screens').doc(firestoreId).update({
              'name': screenData['name'],
              'totalSeats': screenData['totalSeats'],
              'rows': screenData['rows'],
              'columns': screenData['columns'],
              'seats': screenData['seats'],
              'updatedAt': FieldValue.serverTimestamp(),
            });
            result.updated++;
          } else {
            result.unchanged++;
          }
        } else {
          // Insert new screen
          final docRef = await _db.collection('screens').add({
            'theaterId': theaterFirestoreId,
            'name': screenData['name'],
            'totalSeats': screenData['totalSeats'],
            'rows': screenData['rows'],
            'columns': screenData['columns'],
            'seats': screenData['seats'],
            'externalId': screenExternalId,
            'createdAt': FieldValue.serverTimestamp(),
          });
          
          theaterScreens.putIfAbsent(theaterFirestoreId, () => []);
          theaterScreens[theaterFirestoreId]!.add(docRef.id);
          
          result.inserted++;
          print('   ‚ûï Inserted: ${screenData['name']}');
        }
      }
      
      // Update theater.screens arrays
      for (var entry in theaterScreens.entries) {
        await _db.collection('theaters').doc(entry.key).update({
          'screens': entry.value,
        });
      }
      
    } catch (e) {
      print('‚ùå L·ªói sync screens: $e');
      result.error = e.toString();
    }
    
    return result;
  }
  
  /// ‚úÖ Sync showtimes - CH√çNH S√ÅCH ƒê·∫∂C BI·ªÜT
  /// 
  /// Showtimes c≈© (ƒë√£ qua) ‚Üí KH√îNG X√ìA (ƒë·ªÉ gi·ªØ booking history)
  /// Showtimes t∆∞∆°ng lai ‚Üí Sync theo externalId pattern
  Future<SyncResult> syncShowtimes() async {
    final result = SyncResult(collectionName: 'showtimes');
    
    try {
      // Get mappings
      final movieMap = await _getExternalIdMap('movies');
      final theaterMap = await _getExternalIdMap('theaters');
      final screenMap = await _getExternalIdMap('screens');
      
      // Get existing future showtimes
      final now = Timestamp.now();
      final snapshot = await _db
          .collection('showtimes')
          .where('startTime', isGreaterThan: now)
          .get();
      
      // Track existing by composite key: screenId-date-time
      final existingShowtimes = <String, String>{}; // key ‚Üí firestoreId
      
      for (var doc in snapshot.docs) {
        final data = doc.data();
        final screenId = data['screenId'] as String?;
        final startTime = (data['startTime'] as Timestamp?)?.toDate();
        
        if (screenId != null && startTime != null) {
          final key = _buildShowtimeKey(screenId, startTime);
          existingShowtimes[key] = doc.id;
        }
      }
      
      // Prepare all showtime templates
      final allShowtimes = [
        ...HardcodedShowtimesData.allHanoiShowtimes,
        ...HardcodedShowtimesHCMData.allHCMShowtimes,
        ...HardcodedShowtimesDanangData.allDaNangShowtimes,
      ];
      
      // Sync for 7 days
      final dates = [
        "2025-10-29",
        "2025-10-30",
        "2025-10-31",
        "2025-11-01",
        "2025-11-02",
        "2025-11-03",
        "2025-11-04",
      ];
      
      for (var i = 0; i < dates.length; i++) {
        final dateStr = dates[i];
        onProgress?.call(0.75 + (i / dates.length) * 0.25, 'Sync showtimes $dateStr');
        
        for (var showtimeData in allShowtimes) {
          final movieExternalId = showtimeData['movieExternalId'] as String;
          final theaterExternalId = showtimeData['theaterExternalId'] as String;
          final screenExternalId = showtimeData['screenExternalId'] as String;
          final time = showtimeData['time'] as String;
          
          final movieId = movieMap[movieExternalId];
          final theaterId = theaterMap[theaterExternalId];
          final screenId = screenMap[screenExternalId];
          
          if (movieId == null || theaterId == null || screenId == null) {
            continue;
          }
          
          final startTime = DateTime.parse('$dateStr $time:00');
          final endTime = startTime.add(Duration(minutes: 120));
          final key = _buildShowtimeKey(screenId, startTime);
          
          if (existingShowtimes.containsKey(key)) {
            // ƒê√£ t·ªìn t·∫°i ‚Üí update prices n·∫øu c·∫ßn
            final firestoreId = existingShowtimes[key]!;
            await _db.collection('showtimes').doc(firestoreId).update({
              'basePrice': showtimeData['basePrice'],
              'vipPrice': showtimeData['vipPrice'],
              'updatedAt': FieldValue.serverTimestamp(),
            });
            result.updated++;
          } else {
            // Insert new
            await _db.collection('showtimes').add({
              'movieId': movieId,
              'theaterId': theaterId,
              'screenId': screenId,
              'startTime': Timestamp.fromDate(startTime),
              'endTime': Timestamp.fromDate(endTime),
              'basePrice': showtimeData['basePrice'],
              'vipPrice': showtimeData['vipPrice'],
              'availableSeats': 80,
              'bookedSeats': [],
              'status': 'active',
              'createdAt': FieldValue.serverTimestamp(),
            });
            result.inserted++;
          }
        }
      }
      
    } catch (e) {
      print('‚ùå L·ªói sync showtimes: $e');
      result.error = e.toString();
    }
    
    return result;
  }
  
  /// Helper: Ki·ªÉm tra document c·∫ßn update kh√¥ng
  Future<bool> _needsUpdate(
    String collection,
    String docId,
    Map<String, dynamic> newData, {
    List<String>? excludeFields,
  }) async {
    try {
      final doc = await _db.collection(collection).doc(docId).get();
      if (!doc.exists) return true;
      
      final currentData = doc.data()!;
      
      for (var entry in newData.entries) {
        final key = entry.key;
        final newValue = entry.value;
        
        // Skip excluded fields
        if (excludeFields != null && excludeFields.contains(key)) {
          continue;
        }
        
        // Skip metadata fields
        if (key == 'createdAt' || key == 'updatedAt') {
          continue;
        }
        
        final currentValue = currentData[key];
        
        // So s√°nh value
        if (_isDifferent(currentValue, newValue)) {
          return true;
        }
      }
      
      return false;
      
    } catch (e) {
      return true; // N·∫øu l·ªói th√¨ c·ª© update
    }
  }
  
  /// So s√°nh 2 gi√° tr·ªã c√≥ kh√°c nhau kh√¥ng
  bool _isDifferent(dynamic a, dynamic b) {
    if (a == null && b == null) return false;
    if (a == null || b == null) return true;
    
    // So s√°nh List
    if (a is List && b is List) {
      if (a.length != b.length) return true;
      for (var i = 0; i < a.length; i++) {
        if (_isDifferent(a[i], b[i])) return true;
      }
      return false;
    }
    
    // So s√°nh Map
    if (a is Map && b is Map) {
      final keysA = a.keys.toSet();
      final keysB = b.keys.toSet();
      if (keysA.length != keysB.length) return true;
      
      for (var key in keysA) {
        if (!keysB.contains(key)) return true;
        if (_isDifferent(a[key], b[key])) return true;
      }
      return false;
    }
    
    // So s√°nh primitive
    return a != b;
  }
  
  /// L·∫•y mapping externalId ‚Üí firestoreId
  Future<Map<String, String>> _getExternalIdMap(String collection) async {
    final snapshot = await _db.collection(collection).get();
    final map = <String, String>{};
    
    for (var doc in snapshot.docs) {
      final externalId = doc.data()['externalId'] as String?;
      if (externalId != null) {
        map[externalId] = doc.id;
      }
    }
    
    return map;
  }
  
  /// Build unique key cho showtime
  String _buildShowtimeKey(String screenId, DateTime startTime) {
    final date = '${startTime.year}-${startTime.month.toString().padLeft(2, '0')}-${startTime.day.toString().padLeft(2, '0')}';
    final time = '${startTime.hour.toString().padLeft(2, '0')}:${startTime.minute.toString().padLeft(2, '0')}';
    return '$screenId-$date-$time';
  }
}

/// ========================================
/// MODELS
/// ========================================

class SyncReport {
  SyncResult? movies;
  SyncResult? theaters;
  SyncResult? screens;
  SyncResult? showtimes;
  SyncResult? news;
  
  void printSummary() {
    print('='*60);
    print('üìä T·ªîNG K·∫æT SYNC');
    print('='*60);
    print('üé¨ Movies:    ${movies?.summary ?? "Ch∆∞a sync"}');
    print('üè¢ Theaters:  ${theaters?.summary ?? "Ch∆∞a sync"}');
    print('ü™ë Screens:   ${screens?.summary ?? "Ch∆∞a sync"}');
    print('‚è∞ Showtimes: ${showtimes?.summary ?? "Ch∆∞a sync"}');
    print('üì∞ News:      ${news?.summary ?? "Ch∆∞a sync"}');
    print('='*60);
  }
}

class SyncResult {
  final String collectionName;
  int inserted = 0;
  int updated = 0;
  int unchanged = 0;
  String? error;
  
  SyncResult({required this.collectionName});
  
  int get total => inserted + updated + unchanged;
  
  String get summary {
    if (error != null) {
      return 'L·ªói: $error';
    }
    return '$total total (‚ûï $inserted new, üìù $updated updated, ‚úì $unchanged unchanged)';
  }
}
