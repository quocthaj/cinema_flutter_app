import 'package:flutter/material.dart';
import '../../services/seed/hardcoded_seed_service.dart';
import 'admin_guard.dart'; // üî• ADMIN: Import AdminGuard

/// M√†n h√¨nh Admin ƒë·ªÉ qu·∫£n l√Ω seed data
/// üîê CH·ªà ADMIN M·ªöI TRUY C·∫¨P ƒê∆Ø·ª¢C
class SeedDataScreen extends StatefulWidget {
  const SeedDataScreen({super.key});

  @override
  State<SeedDataScreen> createState() => _SeedDataScreenState();
}

class _SeedDataScreenState extends State<SeedDataScreen> {
  final _seedService = HardcodedSeedService();
  bool _isLoading = false;
  String _statusMessage = '';
  double _progress = 0.0;

  /// Th√™m t·∫•t c·∫£ d·ªØ li·ªáu m·∫´u (Hardcoded)
  Future<void> _seedAllData() async {
    setState(() {
      _isLoading = true;
      _statusMessage = 'ƒêang th√™m d·ªØ li·ªáu c·ª©ng...';
      _progress = 0.0;
    });

    // Set up progress callback
    _seedService.onProgress = (progress, message) {
      setState(() {
        _progress = progress;
        _statusMessage = message;
      });
    };

    try {
      await _seedService.seedAll();
      setState(() {
        _progress = 1.0;
        _statusMessage = '‚úÖ Th√™m d·ªØ li·ªáu th√†nh c√¥ng!\n'
            '  üìΩÔ∏è  15 phim\n'
            '  üé≠ 11 r·∫°p chi·∫øu (4 HN + 4 HCM + 3 ƒêN)\n'
            '  ü™ë 44 ph√≤ng chi·∫øu (11 √ó 4)\n'
            '  ‚è∞ ~1,848 su·∫•t chi·∫øu (264/ng√†y √ó 7 ng√†y)\n'
            '  ‚úÖ KH√îNG TR√ôNG GI·ªú - M·ªói ph√≤ng m·ªói gi·ªù ch·ªâ 1 su·∫•t';
      });
    } catch (e) {
      setState(() {
        _statusMessage = '‚ùå L·ªói: $e';
        _progress = 0.0;
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  /// X√≥a t·∫•t c·∫£ d·ªØ li·ªáu
  Future<void> _clearAllData() async {
    final confirm = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('‚ö†Ô∏è C·∫£nh b√°o'),
        content: const Text(
          'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a T·∫§T C·∫¢ d·ªØ li·ªáu?\n'
          'H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!'
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('H·ªßy'),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, true),
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('X√≥a'),
          ),
        ],
      ),
    );

    if (confirm != true) return;

    setState(() {
      _isLoading = true;
      _statusMessage = 'ƒêang x√≥a d·ªØ li·ªáu...';
      _progress = 0.0;
    });

    // Set up progress callback
    _seedService.onProgress = (progress, message) {
      setState(() {
        _progress = progress;
        _statusMessage = message;
      });
    };

    try {
      await _seedService.clearAll();
      setState(() {
        _statusMessage = '‚úÖ X√≥a d·ªØ li·ªáu th√†nh c√¥ng!';
        _progress = 1.0;
      });
    } catch (e) {
      setState(() {
        _statusMessage = '‚ùå L·ªói: $e';
        _progress = 0.0;
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  /// X√≥a m·ªôt collection c·ª• th·ªÉ
  Future<void> _clearCollection(String collectionName, String displayName) async {
    final confirm = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('‚ö†Ô∏è X√°c nh·∫≠n'),
        content: Text('B·∫°n c√≥ mu·ªën x√≥a collection "$displayName"?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('H·ªßy'),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, true),
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('X√≥a'),
          ),
        ],
      ),
    );

    if (confirm != true) return;

    setState(() {
      _isLoading = true;
      _statusMessage = 'ƒêang x√≥a $displayName...';
    });

    try {
      await _seedService.clearCollection(collectionName);
      setState(() {
        _statusMessage = '‚úÖ ƒê√£ x√≥a $displayName th√†nh c√¥ng!';
      });
    } catch (e) {
      setState(() {
        _statusMessage = '‚ùå L·ªói khi x√≥a $displayName: $e';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  /// Build button x√≥a m·ªôt collection
  Widget _buildClearCollectionButton(String collectionName, String displayName, IconData icon) {
    return ElevatedButton.icon(
      onPressed: _isLoading ? null : () => _clearCollection(collectionName, displayName),
      icon: Icon(icon, size: 18),
      label: Text(displayName),
      style: ElevatedButton.styleFrom(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
        backgroundColor: Colors.red.shade700,
        foregroundColor: Colors.white,
        textStyle: const TextStyle(fontSize: 13),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    // üî• ADMIN: Wrap to√†n b·ªô screen v·ªõi AdminGuard
    return AdminGuard(
      screenName: 'Qu·∫£n l√Ω d·ªØ li·ªáu',
      child: Scaffold(
        appBar: AppBar(
          title: const Text('üîß Admin - Qu·∫£n l√Ω Data'),
          backgroundColor: Colors.deepPurple,
          // üî• ADMIN: Hi·ªÉn th·ªã badge
          actions: const [
            AdminBadge(),
          ],
        ),
        body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // Th√¥ng b√°o c·∫£nh b√°o
            Card(
              color: Colors.orange.shade50,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.warning, color: Colors.orange.shade700),
                        const SizedBox(width: 8),
                        Text(
                          'Ch·∫ø ƒë·ªô Development',
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            color: Colors.orange.shade700,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    const Text(
                      'M√†n h√¨nh n√†y ch·ªâ d√πng ƒë·ªÉ th√™m/x√≥a d·ªØ li·ªáu m·∫´u. '
                      'Kh√¥ng n√™n s·ª≠ d·ª•ng trong production.',
                      style: TextStyle(fontSize: 12, color: Colors.black87),
                    ),
                  ],
                ),
              ),
            ),
            
            const SizedBox(height: 24),
            
            // üü¢ SECTION: TH√äM D·ªÆ LI·ªÜU
            Text(
              'üì• TH√äM D·ªÆ LI·ªÜU C·ª®NG',
              style: Theme.of(context).textTheme.titleLarge?.copyWith(
                fontWeight: FontWeight.bold,
                color: Colors.green.shade700,
              ),
            ),
            const SizedBox(height: 12),

            // N√∫t Seed All Data
            ElevatedButton.icon(
              onPressed: _isLoading ? null : _seedAllData,
              icon: const Icon(Icons.upload),
              label: const Text(
                'Th√™m t·∫•t c·∫£ d·ªØ li·ªáu c·ª©ng',
                style: TextStyle(fontSize: 16),
              ),
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.all(16),
                backgroundColor: Colors.green,
                foregroundColor: Colors.white,
              ),
            ),

            const SizedBox(height: 24),
            const Divider(thickness: 2),
            const SizedBox(height: 24),

            // üî¥ SECTION: X√ìA D·ªÆ LI·ªÜU
            Text(
              'üóëÔ∏è X√ìA D·ªÆ LI·ªÜU',
              style: Theme.of(context).textTheme.titleLarge?.copyWith(
                fontWeight: FontWeight.bold,
                color: Colors.red.shade700,
              ),
            ),
            const SizedBox(height: 12),

            // N√∫t Clear All Data (NGUY HI·ªÇM - ƒê·ªé)
            OutlinedButton.icon(
              onPressed: _isLoading ? null : _clearAllData,
              icon: const Icon(Icons.delete_forever),
              label: const Text(
                '‚ö†Ô∏è X√ìA T·∫§T C·∫¢ D·ªÆ LI·ªÜU',
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
              ),
              style: OutlinedButton.styleFrom(
                padding: const EdgeInsets.all(16),
                foregroundColor: Colors.red,
                side: BorderSide(color: Colors.red, width: 2),
              ),
            ),

            const SizedBox(height: 16),

            // Ti√™u ƒë·ªÅ x√≥a t·ª´ng collection
            Text(
              'X√≥a t·ª´ng collection:',
              style: Theme.of(context).textTheme.titleSmall?.copyWith(
                fontWeight: FontWeight.w600,
                color: Colors.white70,
              ),
            ),
            const SizedBox(height: 12),

            // Buttons x√≥a t·ª´ng collection
            Wrap(
              spacing: 8,
              runSpacing: 8,
              children: [
                _buildClearCollectionButton('movies', 'Phim', Icons.movie),
                _buildClearCollectionButton('theaters', 'R·∫°p', Icons.theater_comedy),
                _buildClearCollectionButton('screens', 'Ph√≤ng', Icons.meeting_room),
                _buildClearCollectionButton('showtimes', 'L·ªãch chi·∫øu', Icons.schedule),
                _buildClearCollectionButton('bookings', 'ƒê·∫∑t v√©', Icons.confirmation_number),
                _buildClearCollectionButton('payments', 'Thanh to√°n', Icons.payment),
              ],
            ),

            const SizedBox(height: 24),

            // Status message
            if (_statusMessage.isNotEmpty)
              Card(
                color: _statusMessage.contains('‚úÖ') 
                    ? Colors.green.shade50 
                    : Colors.red.shade50,
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        _statusMessage,
                        style: TextStyle(
                          color: _statusMessage.contains('‚úÖ')
                              ? Colors.green.shade700
                              : Colors.red.shade700,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                      if (_isLoading && _progress > 0) ...[
                        const SizedBox(height: 12),
                        ClipRRect(
                          borderRadius: BorderRadius.circular(8),
                          child: LinearProgressIndicator(
                            value: _progress,
                            minHeight: 8,
                            backgroundColor: Colors.grey.shade300,
                            valueColor: AlwaysStoppedAnimation<Color>(
                              Colors.green.shade600,
                            ),
                          ),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          '${(_progress * 100).toStringAsFixed(0)}%',
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.grey.shade700,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ],
                  ),
                ),
              ),

            // Loading indicator
            if (_isLoading && _progress == 0)
              const Padding(
                padding: EdgeInsets.all(16.0),
                child: Center(
                  child: CircularProgressIndicator(),
                ),
              ),

            const SizedBox(height: 24),

            // H∆∞·ªõng d·∫´n
            Card(
              color: Colors.blue.shade50,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.info, color: Colors.blue.shade700),
                        const SizedBox(width: 8),
                        Text(
                          'H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng',
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            color: Colors.blue.shade700,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    const Text(
                      'ÔøΩ ƒê·ªíNG B·ªò D·ªÆ LI·ªÜU (Recommended):\n'
                      '‚Ä¢ "Ki·ªÉm tra thay ƒë·ªïi": Xem nh·ªØng g√¨ s·∫Ω thay ƒë·ªïi m√† kh√¥ng th·ª±c thi\n'
                      '‚Ä¢ "ƒê·ªìng b·ªô th·ª±c t·∫ø": Update/Add/Delete d·ªØ li·ªáu theo seed files\n'
                      '  - Update: C·∫≠p nh·∫≠t b·∫£n ghi ƒë√£ c√≥ n·∫øu c√≥ thay ƒë·ªïi\n'
                      '  - Add: Th√™m m·ªõi b·∫£n ghi c√≤n thi·∫øu\n'
                      '  - Delete: X√≥a b·∫£n ghi kh√¥ng c√≤n trong seed\n\n'
                      'ÔøΩüì• TH√äM D·ªÆ LI·ªÜU (Legacy):\n'
                      '‚Ä¢ Nh·∫•n "Th√™m t·∫•t c·∫£ d·ªØ li·ªáu m·∫´u" ƒë·ªÉ t·∫°o:\n'
                      '  - 15 phim m·∫´u\n'
                      '  - 18 r·∫°p chi·∫øu\n'
                      '  - 72 ph√≤ng chi·∫øu\n'
                      '  - L·ªãch chi·∫øu trong 7 ng√†y\n\n'
                      'üóëÔ∏è X√ìA D·ªÆ LI·ªÜU:\n'
                      '‚Ä¢ "X√ìA T·∫§T C·∫¢": X√≥a to√†n b·ªô data (bookings, payments, showtimes, screens, theaters, movies)\n'
                      '‚Ä¢ X√≥a t·ª´ng collection: Ch·ªâ x√≥a collection c·ª• th·ªÉ\n\n'
                      'üí° TIPS:\n'
                      '‚Ä¢ N·∫øu app b·ªã lag/ƒëen ‚Üí X√≥a bookings + payments tr∆∞·ªõc\n'
                      '‚Ä¢ N·∫øu mu·ªën l√†m l·∫°i ho√†n to√†n ‚Üí X√≥a t·∫•t c·∫£ r·ªìi seed l·∫°i\n'
                      '‚Ä¢ Check Firebase Console ƒë·ªÉ verify',
                      style: TextStyle(fontSize: 12, color: Colors.black87),
                    ),
                  ],
                ),
              ),
            ),

            const SizedBox(height: 20),
          ],
        ),
      ),
    ),
    ); // üî• ADMIN: ƒê√≥ng AdminGuard
  }
}
